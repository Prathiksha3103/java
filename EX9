 package ex9; 
import java.util.*; 
class TreeNode<T extends Comparable<T>> { 
T data; 
TreeNode<T> left, right; 
TreeNode(T data) { 
this.data = data; 
left = right = null; 
} 
} 
class BinaryTree<T extends Comparable<T>> { 
TreeNode<T> root; 
void insert(T data) { 
root = insertRec(root, data); 
} 
private TreeNode<T> insertRec(TreeNode<T> node, T data) { 
if (node == null) return new TreeNode<>(data); 
if (data.compareTo(node.data) < 0) node.left = insertRec(node.left, data); 
else node.right = insertRec(node.right, data); 
return node; 
} 
void inOrder(TreeNode<T> node) { 
if (node == null) return; 
inOrder(node.left); 
System.out.print(node.data + " "); 
inOrder(node.right); 
} 
void preOrder(TreeNode<T> node) { 
if (node == null) return; 
System.out.print(node.data + " "); 
preOrder(node.left); 
preOrder(node.right); 
} 
void postOrder(TreeNode<T> node) { 
if (node == null) return; 

postOrder(node.left); 
postOrder(node.right); 
System.out.print(node.data + " "); 
} 
void levelOrder() { 
if (root == null) return; 
Queue<TreeNode<T>> queue = new LinkedList<>(); 
queue.add(root); 
while (!queue.isEmpty()) { 
TreeNode<T> node = queue.poll(); 
System.out.print(node.data + " "); 
if (node.left != null) queue.add(node.left); 
if (node.right != null) queue.add(node.right); 
} 
} 
} 
public class GenericBinaryTreeDemo { 
public static void main(String[] args) { 
System.out.println("Priyadharshini K"); 
System.out.println("2117240070233"); 
Scanner sc = new Scanner(System.in); 
BinaryTree<Integer> tree = new BinaryTree<>(); 
System.out.print("How many nodes do you want to insert? "); 
int n = sc.nextInt(); 
System.out.println("Enter " + n + " integer values:"); 
for (int i = 0; i < n; i++) { 
int value = sc.nextInt(); 
tree.insert(value); 
} 
System.out.print("\nEnter Test Case to run (2-5): "); 
int tc = sc.nextInt(); 
System.out.println("\n=== Output for TC" + tc + " ==="); 
switch(tc) { 
case 2: 
System.out.print("Level-order: "); tree.levelOrder(); break; 
case 3: 
System.out.print("In-order: "); tree.inOrder(tree.root); break; 

 
case 4: 
System.out.print("Pre-order: "); tree.preOrder(tree.root); break; 
case 5: 
System.out.print("Post-order: "); tree.postOrder(tree.root); break; 
default: 
System.out.println("Invalid Test Case! Enter 2-5 only."); 
} 
System.out.println(); 
sc.close(); 
} 
} 
